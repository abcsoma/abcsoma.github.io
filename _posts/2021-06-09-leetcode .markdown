---
layout:     post
title:      "6.9刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-06-09 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [移除链表元素](https://leetcode-cn.com/problems/remove-linked-list-elements/)

> 给你一个链表的头节点 `head` 和一个整数 `val` ，请你删除链表中所有满足 `Node.val == val` 的节点，并返回 **新的头节点** 。
>
> 输入：head = [1,2,6,3,4,5,6], val = 6
> 输出：[1,2,3,4,5]
> 示例 2：
>
> 输入：head = [], val = 1
> 输出：[]
> 示例 3：
>
> 输入：head = [7,7,7,7], val = 7
> 输出：[]

```java
    //迭代
    public ListNode removeElements(ListNode head, int val) {
        if(head == null) {
            return head;
        }
        //虚拟头节点,因为有可能删除头节点的
        ListNode hair = new ListNode(0);
        hair.next = head;

        ListNode cur = hair;
        while(cur.next != null) {
            if(cur.next.val == val) {
                cur.next = cur.next.next;
            }else {
                cur = cur.next;
            }
        }
        return hair.next;
    }

    //递归
    public ListNode removeElements2(ListNode head, int val) {
        if(head == null) {
            return head;
        }
        head.next = removeElements2(head.next, val);
        return head.val == val ? head.next : head;

    }
```

## [设计链表](https://leetcode-cn.com/problems/design-linked-list/)

> 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。
>
> 在链表类中实现这些功能：
>
> get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
> addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
> addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
> addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
> deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。
>
>
> 示例：
>
> MyLinkedList linkedList = new MyLinkedList();
> linkedList.addAtHead(1);
> linkedList.addAtTail(3);
> linkedList.addAtIndex(1,2);   //链表变为1-> 2-> 3
> linkedList.get(1);            //返回2
> linkedList.deleteAtIndex(1);  //现在链表是1-> 3
> linkedList.get(1);            //返回3

```java
//单链表
public class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) {
        this.val = val;
    }
}

class MyLinkedList {
    int size;
    ListNode head;
    /** Initialize your data structure here. */
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int get(int index) {
        if(index < 0 || index >= size) {
            //get同样也是，index不能等于size
            return -1;
        }
        ListNode cur = head;
        for(int i = 0; i < index + 1; i++) {
            //这里index+1是因为刚好要定位到位置，而add的时候得定位到该位置之前
            cur = cur.next;
        }
        return cur.val;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void addAtHead(int val) {
        //在前面增加节点
        addAtIndex(0, val);
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void addAtTail(int val) {
        //在后面增加节点
        addAtIndex(size, val);
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    public void addAtIndex(int index, int val) {
        //在固定位置前面插入
        if(index > size) {
            return;
        }
        if(index < 0) {
            index = 0;
        }
        size++;
        ListNode toAdd = new ListNode(val);
        //不能改变head的位置
        ListNode cur = head;
        for(int i = 0; i < index; i++) {
            cur = cur.next;
        }
        //循环完时，cur的位置时要插入节点的前一个节点

        toAdd.next = cur.next;
        cur.next = toAdd;

    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void deleteAtIndex(int index) {
        if(index >= size || index < 0) {
            //index不能等于size，不然会npe，而添加的时候由于在前面添加，如果等于size，相当于addAtTail
            return;
        }
        size--;
        
        ListNode cur = head;
        for(int i = 0; i < index; i++) {
            cur = cur.next;
        }
        cur.next = cur.next.next;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
```

```java
public class ListNode {
    int val;
    ListNode next;
    ListNode pre;
    ListNode(int val) {
        this.val = val;
    }
}
class MyLinkedList {
    int size;
    ListNode head;
    ListNode tail;
    /** Initialize your data structure here. */
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
        tail = new ListNode(0);
        head.next = tail;
        tail.pre = head;
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int get(int index) {
        if(index < 0 || index >= size) {
            return -1;
        }

        ListNode cur = getPrevNode(index);

        return cur.next.val;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void addAtHead(int val) {
        addAtIndex(0, val);
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void addAtTail(int val) {
        addAtIndex(size, val);
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    public void addAtIndex(int index, int val) {
        if(index > size) {
            return;
        }
        if(index < 0) {
            index = 0;
        }
        ListNode toAdd = new ListNode(val);
        ListNode cur = getPrevNode(index);
        toAdd.next = cur.next;
        cur.next.pre = toAdd;
        toAdd.pre = cur;
        cur.next = toAdd;
        size++;
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void deleteAtIndex(int index) {
        if(index < 0 || index >= size) {
            return;
        }

        ListNode cur = getPrevNode(index);
        cur.next = cur.next.next;
        cur.next.pre = cur;
        size--;
    }

  //关键就在于这一步
    private ListNode getPrevNode(int index) {
        //保证当前节点都为要操作的节点前一个
        ListNode prevNode = head;
        if (index < size / 2) {
            for (int i = 0; i < index; i++) {
                prevNode = prevNode.next;
            }
        } else {
            prevNode = tail;
            for (int i = 0; i <= size - index; i++) {
                prevNode = prevNode.pre;
            }
        }
        return prevNode;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
```

这道题的双链表实在是太烦了。。。

--------

——Soma 2021.6.9 23:00

