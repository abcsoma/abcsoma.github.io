---
layout:     post
title:      "5.22刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-05-22 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [ LeetCode   最长回文子串](https://leetcode-cn.com/problems/longest-palindromic-substring/)

> 给你一个字符串 `s`，找到 `s` 中最长的回文子串。
>
> 示例 1：
>
> 输入：s = "babad"
> 输出："bab"
> 解释："aba" 同样是符合题意的答案。
> 示例 2：
>
> 输入：s = "cbbd"
> 输出："bb"
> 示例 3：
>
> 输入：s = "a"
> 输出："a"
> 示例 4：
>
> 输入：s = "ac"
> 输出："a"

中心扩散法可能容易理解一点

```java
class Solution {
    public String longestPalindrome(String s) {
        //中心扩散法
        int max = 1;
        int start = 0,end = 0;
        for(int i = 0;i<s.length();i++){
            int left = i , right = i;
            int len = 1;
            //找到左边和右边第一个不等于i位置字符的字符
            while(left>=0 && s.charAt(left) == s.charAt(i)){
                left--;
                len++;
            }
            left++;
            len--;
            while(right<=s.length()-1 && s.charAt(right) == s.charAt(i)){
                right++;
                len++;
            }
            right--;
            len--;
            while(left>=0 && right<=s.length()-1 && s.charAt(right) == s.charAt(left) ){
                left--;
                right++;
                len += 2;
            }
            if(len > max){
                max = len;
                start = left+1;
                end = right-1;
            }
        }
        return s.substring(start,end+1);
    }
}
```

这我自己写的，居然还能。。。。。

![](/img/image-522-leet.png)

接下来看看题解

```java
public String longestPalindrome1(String s) {

        if (s == null || s.length() == 0) {
            return "";
        }
        int strLen = s.length();
        int left = 0;
        int right = 0;
        int len = 1;
        int maxStart = 0;
        int maxLen = 0;

        for (int i = 0; i < strLen; i++) {
            left = i - 1;
            right = i + 1;
            while (left >= 0 && s.charAt(left) == s.charAt(i)) {
                len++;
                left--;
            }
            while (right < strLen && s.charAt(right) == s.charAt(i)) {
                len++;
                right++;
            }
            while (left >= 0 && right < strLen && s.charAt(right) == s.charAt(left)) {
                len = len + 2;
                left--;
                right++;
            }
            if (len > maxLen) {
                maxLen = len;
                maxStart = left;
            }
            len = 1;
        }
        return s.substring(maxStart + 1, maxStart + maxLen + 1);

    }
```

感觉差不多。。。。left和right初始值比我设得好，后面其实差不多。。。

还有一个动态规划，时间复杂度都是O(n^2)。。。我还是用我的中心扩散法吧