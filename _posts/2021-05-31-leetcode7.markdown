---
layout:     post
title:      "5.31刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-05-31 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [ LeetCode   三数之和](https://leetcode-cn.com/problems/3sum/)

> 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
>
> 注意：答案中不可以包含重复的三元组。
>
>  
>
> 示例 1：
>
> 输入：nums = [-1,0,1,2,-1,-4]
> 输出：[[-1,-1,2],[-1,0,1]]
> 示例 2：
>
> 输入：nums = []
> 输出：[]
> 示例 3：
>
> 输入：nums = [0]
> 输出：[]

这道题之前字节一面的时候手撕的题目

排序+双指针吧。

第一个指针遍历数组中的数，第二个指针指向其后面一个，第三个指针指向最后一个位置。

考虑特殊情况，连续数字相等的情况，就直接跳过。

```java
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0 ; i < nums.length-2 ; i++){
            if(nums[i]>0){
                break;
                //第一个数大于0，相加肯定不能等于0
            }
            if(i>=1 && nums[i]==nums[i-1]){
                continue;
            }
            int left = i+1 , right = nums.length-1;//左右指针分别指向i+1和length-1
            while(left<right){
                if(nums[i]+nums[left]+nums[right]>0){
                    right--;
                }else if(nums[i]+nums[left]+nums[right]<0){
                    left++;
                }else{
                    List<Integer> tmp = new ArrayList<>();
                    tmp.add(nums[i]);
                    tmp.add(nums[left]);
                    tmp.add(nums[right]);
                    res.add(tmp);
                    //用完之后需要去重
                    while(left<right && nums[left]==nums[left+1]){
                        left++;
                    }
                    while(left<right && nums[right]==nums[right-1]){
                        right--;
                    }
                    //去完重之后要排除已经用过的
                    left++;
                    right--;
                }
            }
        }
        return res;
    }
}
```

## [ LeetCode   电话号码的字母组合](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)

> 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。
>
> 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。
>
> 
>
> 示例 1：
>
> 输入：digits = "23"
> 输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]
> 示例 2：
>
> 输入：digits = ""
> 输出：[]
> 示例 3：
>
> 输入：digits = "2"
> 输出：["a","b","c"]

这个是全排列问题。

一般用回溯+剪枝。

回溯法一般用递归去实现。

递归的套路

```java
recur(){
    跳出条件//递归一定要有跳出的条件，不然会爆栈
    递归的操作
    操作结束剪枝
}
```

```java
class Solution {
    String[] map = {"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    //这个数组用来保存映射关系
    List<String> res = new ArrayList<>();
    //保存返回的结果
    public List<String> letterCombinations(String digits) {
        StringBuilder sb = new StringBuilder();
        if(digits.length()==0 || digits.trim()==""){
            return res;
        }
        dfs(digits,0,sb);
        return res;
    }
    public void dfs(String digits,int index,StringBuilder sb){
        //跳出条件
        if(sb.length()==digits.length()){
            res.add(sb.toString());
            return;
        }
        //递归操作
        char num = digits.charAt(index);//找到当前排列的位置的数字
        String letters = map[num-'2'];
        for(int i = 0;i<letters.length();i++){
            sb.append(letters.charAt(i));
            //要去排列第二个位置了，就直接递归
            dfs(digits,index+1,sb);
            //剪枝，必须对当前层剪枝，而不是当前循环
            sb.deleteCharAt(index);
        } 
    }
}
```

------------

——Soma 2021.5.31 20:56

