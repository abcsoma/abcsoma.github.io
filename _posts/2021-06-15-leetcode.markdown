---
layout:     post
title:      "6.15刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-06-15 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [有效的字母异位词](https://leetcode-cn.com/problems/valid-anagram/)

> 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。
>
> 注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。
>
>  
>
> 示例 1:
>
> 输入: s = "anagram", t = "nagaram"
> 输出: true
> 示例 2:
>
> 输入: s = "rat", t = "car"
> 输出: false

直接map记录一个的数量，然后第二个进去判断。

```java
class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() == 0 || t.length() == 0 || s.length() != t.length()) {
            return false;
        }
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for(int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if(map.getOrDefault(c, 0) == 0) {
                return false;
            }else {
                map.put(c, map.get(c) - 1);
            }
        }
        return true;
    }
}
```

## [赎金信](https://leetcode-cn.com/problems/ransom-note/)

> 给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。
>
> (题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)
>
>  
>
> 示例 1：
>
> 输入：ransomNote = "a", magazine = "b"
> 输出：false
> 示例 2：
>
> 输入：ransomNote = "aa", magazine = "ab"
> 输出：false
> 示例 3：
>
> 输入：ransomNote = "aa", magazine = "aab"
> 输出：true

和上面那道题一模一样。

```java
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int l1 = ransomNote.length();
        int l2 = magazine.length();
        if(l1 == 0 || l2 == 0 || l1 > l2) {
            return false;
        }
        Map<Character, Integer> map = new HashMap<>();

        for(int i = 0; i < l2; i++) {
            char c = magazine.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for(int i = 0; i < l1; i++) {
            char c = ransomNote.charAt(i);
            if(map.getOrDefault(c, 0) == 0) {
                return false;
            }else {
                map.put(c, map.get(c) - 1);
            }
        }
        return true;
    }
}
```

## [字母异位词分组](https://leetcode-cn.com/problems/group-anagrams/)

> 给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。
>
> 字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母都恰好只用一次。
>
>  
>
> 示例 1:
>
> 输入: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
> 输出: [["bat"],["nat","tan"],["ate","eat","tea"]]
> 示例 2:
>
> 输入: strs = [""]
> 输出: [[""]]
> 示例 3:
>
> 输入: strs = ["a"]
> 输出: [["a"]]

先整一手暴力法，果然就击败5%

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> res = new ArrayList<>();
        if(strs.length == 0) {
            return res;
        }
        for(int i = 0; i < strs.length; i++) {
            if(strs[i] != null) {
                String s = strs[i];
                List<String> tmp = new ArrayList<>();
                tmp.add(s);
                for(int j = i + 1; j < strs.length; j++) {
                    if(strs[j] != null){
                        String t = strs[j];
                        if(isAnagram(s, t)) {
                            tmp.add(t);
                            strs[j] = null;
                        }
                    }
                }
                res.add(tmp);
            }
        }
        return res;
    }
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) {
            return false;
        }
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for(int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if(map.getOrDefault(c, 0) == 0) {
                return false;
            }else {
                map.put(c, map.get(c) - 1);
            }
        }
        return true;
    }
}
```

看了题解，还有一个思路也比较清奇。。。

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<String, List<String>>();
        for (String str : strs) {
            int[] counts = new int[26];
            int length = str.length();
            for (int i = 0; i < length; i++) {
                counts[str.charAt(i) - 'a']++;
            }
            // 将每个出现次数大于 0 的字母和出现次数按顺序拼接成字符串，作为哈希表的键
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < 26; i++) {
                if (counts[i] != 0) {
                    sb.append((char) ('a' + i));
                    sb.append(counts[i]);
                }
            }
            String key = sb.toString();
            List<String> list = map.getOrDefault(key, new ArrayList<String>());
            list.add(str);
            map.put(key, list);
        }
        return new ArrayList<List<String>>(map.values());
    }
}
```

## [找到字符串中所有字母异位词](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)

> 给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。
>
> 异位词 指字母相同，但排列不同的字符串。
>
>  
>
> 示例 1:
>
> 输入: s = "cbaebabacd", p = "abc"
> 输出: [0,6]
> 解释:
> 起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
> 起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。
>  示例 2:
>
> 输入: s = "abab", p = "ab"
> 输出: [0,1,2]
> 解释:
> 起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
> 起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
> 起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。

依旧暴力法，能过。

```java
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        if(p.length() > s.length()) {
            return new ArrayList<>();
        }
        List<Integer> res = new ArrayList<>();
        for(int i = 0; i <= s.length() - p.length(); i++){
            String tmp = s.substring(i, i+p.length());
            if(judge(tmp, p)) {
                res.add(i);
            }
        }
        return res;
    }
    public boolean judge(String s, String p) {
        int[] num = new int[26];
        for(int i = 0; i < p.length(); i++) {
            char c = p.charAt(i);
            num[c - 'a']++;
        }
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(num[c - 'a'] == 0) {
                return false;
            }
            num[c - 'a']--;
        }
        return true;
    }
}
```

题解用了滑动窗口，但还不如我的方法简单粗暴，虽然耗时有点长了。

对于key为小的数字或者字母时，可以用数组替代map，可以加快一点速度。

--------

——Soma 2021.6.15 23:00

