---
layout:     post
title:      "5.27刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-05-27 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [ LeetCode   正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/)

> 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
>
> '.' 匹配任意单个字符
> '*' 匹配零个或多个前面的那一个元素
> 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
>
>
> 示例 1：
>
> 输入：s = "aa" p = "a"
> 输出：false
> 解释："a" 无法匹配 "aa" 整个字符串。
> 示例 2:
>
> 输入：s = "aa" p = "a*"
> 输出：true
> 解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
> 示例 3：
>
> 输入：s = "ab" p = ".*"
> 输出：true
> 解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
> 示例 4：
>
> 输入：s = "aab" p = "c*a*b"
> 输出：true
> 解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
> 示例 5：
>
> 输入：s = "mississippi" p = "mis*is*p*."
> 输出：false

这道题hard题，我之前在牛客做过一遍，还是有点不太会。。。

用dp[i] [j]表示s的前i个字符和p的前j个字符匹配

推断转移方程：

- 如果p的第j个字符是字母，那么s的第i个字母必须和p的第j个字母相同，并且dp[i-1] [j-1]可以匹配

- 如果p的第j个字符是'*'，就是说p的第j-1个字符可以匹配任意次。

  如果匹配0次，则必须s的前i个字符与p的前j-2个字符匹配；

  如果匹配1次，则s的前i-1个字符和p的前j-2个字符匹配，并且s的第i个字符和p的第j-1个字符相同；

  如果匹配2次，则s的前i-2个字符和p的前j-2个字符匹配，并且s的第i个字符等于第i-1个字符等于p的第j-1个字符

  这个本质上也只会有两种情况，一种是匹配0次，也就是把p的后面2个字符丢掉；另一种是匹配多次，也就是丢掉s的后面相应次数的字符。

- 如果p的第j个字符是'.'，那么s的前i-1个字符和p的前j-1个字符可以匹配，s的第i个和p的第j个字符不用想等

```java
状态转移方程
dp[i][j] = dp[i-1][j-1] && s[i-1] = p[j-1]  //字母
dp[i][j] = dp[i-1][j-1]  //'.'
//'*'
1. dp[i][j] = dp[i][j-2] //匹配0次
2. dp[i][j] = dp[i-1][j] //匹配多次，s一个一个往前移，看能不能匹配
  
```



```JAVA
class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        dp[0][0] = true;
        for(int j = 2;j<=n;j+=2){
            dp[0][j] = dp[0][j-2] && p.charAt(j-1) == '*';
        }
        //初始化表示当s为空串时，p的最后一个字符必须为'*'并且偶数位置必须为'*'这样才能匹配，所以步长为2
        for(int i = 1;i<=m;i++){
            for(int j = 1;j<=n;j++){
                if(p.charAt(j-1)=='*'){
                    //匹配0次
                    if(dp[i][j-2]){
                        dp[i][j] = true;
                    }else if(dp[i-1][j] && (s.charAt(i-1)==p.charAt(j-2) || p.charAt(j-2)=='.')){
                        //s的前i-1个字符和p的前j个字符匹配时，就看s的第i个字符加进去能不能匹配
                        dp[i][j] = true;
                    }
                }else{
                    if(p.charAt(j-1)=='.'){
                        dp[i][j] = dp[i-1][j-1];
                    }else{
                        dp[i][j] = dp[i-1][j-1] && s.charAt(i-1)==p.charAt(j-1);
                    }
                }
            }
        }
        return dp[m][n];
    }
}
```

这道题的难点主要就在于分析p的最后一个字符为'*'时的情况。

-------------

——Soma 2021.5.27 20:40

