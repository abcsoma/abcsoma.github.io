---
layout:     post
title:      "6.3刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-06-03 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [ LeetCode   二分查找](https://leetcode-cn.com/problems/binary-search/)

> 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
>
> 
>示例 1:
> 
>输入: nums = [-1,0,3,5,9,12], target = 9
>输出: 4
> 解释: 9 出现在 nums 中并且下标为 4
> 示例 2:
> 
>输入: nums = [-1,0,3,5,9,12], target = 2
> 输出: -1
> 解释: 2 不存在 nums 中因此返回 -1

最基础的二分查找，因为最近刷题感觉思路转换的太快了，还是得按照tag一个一个来刷，刷完一遍再去刷hot 100。

```java
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0) {
            return -1;
        }
        int left = 0, right = nums.length - 1;
        while(left <= right) { //关键在于这边必须要等于，不然left和right重合的时候他就不判断了
            int mid = left + (right - left)/2;
            if(nums[mid] > target) {
                right = mid - 1;
            }else if(nums[mid] < target) {
                left = mid + 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
```

## [ LeetCode   搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/)

> 示例 1:
>
> 输入: nums = [1,3,5,6], target = 5
> 输出: 2
> 示例 2:
>
> 输入: nums = [1,3,5,6], target = 2
> 输出: 1
> 示例 3:
>
> 输入: nums = [1,3,5,6], target = 7
> 输出: 4
> 示例 4:
>
> 输入: nums = [1,3,5,6], target = 0
> 输出: 0
> 示例 5:
>
> 输入: nums = [1], target = 0
> 输出: 0

O(log n)的算法就是二分查找

```java
class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if(nums[mid] > target) {
                right = mid - 1;
            }else if(nums[mid] < target) {
                left = mid + 1;
            }else {
                return mid;
            }
        }
        return left;//区别仅在于最后跳出循环的时候取哪个位置去插入
    }
}
```

## [ LeetCode   在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)

> 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
>
> 如果数组中不存在目标值 target，返回 [-1, -1]。
>
> 进阶：
>
> 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
>
>
> 示例 1：
>
> 输入：nums = [5,7,7,8,8,10], target = 8
> 输出：[3,4]
> 示例 2：
>
> 输入：nums = [5,7,7,8,8,10], target = 6
> 输出：[-1,-1]
> 示例 3：
>
> 输入：nums = [], target = 0
> 输出：[-1,-1]

```java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length == 0){
            return new int[]{-1,-1};
        }
        int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return new int[]{first, last};

    }
    
    public int findFirst(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while(left <= right) {
            int mid = left + (right-left)/2;
            if(nums[mid] < target) {
                left = mid + 1;
            }else if(nums[mid] >= target) { //[1,3,3,3,5] 3这种情况，继续向左找
                right = mid - 1;
            }
            //结束循环后left的位置就是一个target位置
            if(left != nums.length && nums[left] == target) {
                return left;
            }
        }
        return -1;
    }

    public int findLast(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while(left <= right) {
            int mid = left + (right-left)/2;
            if(nums[mid] <= target) {
                left = mid + 1;
            }else if(nums[mid] > target) { //[1,3,3,3,5] 3这种情况，继续向右找
                right = mid - 1;
            }
            //结束循环后right的位置就是最后一个target位置
            if(right != -1 && nums[right] == target) {
                return right;
            }
        }
        return -1;
    }
}
```

## [x 的平方根](https://leetcode-cn.com/problems/sqrtx/)

> 实现 int sqrt(int x) 函数。
>
> 计算并返回 x 的平方根，其中 x 是非负整数。
>
> 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
>
> 示例 1:
>
> 输入: 4
> 输出: 2
> 示例 2:
>
> 输入: 8
> 输出: 2
> 说明: 8 的平方根是 2.82842..., 
>      由于返回类型是整数，小数部分将被舍去。

```java
class Solution {
    public int mySqrt(int x) {
        int left = 0,right = x;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if((long)mid * mid > x) {//0,1,2,3,4,5 这里必须得是long不然有可能超过2^15-1
                right = mid - 1;
            }else if((long)mid * mid < x){
                left = mid + 1;
            }else {
                return mid;
            }
        }
        return right;
    }
}
//或者
class Solution {
    public int mySqrt(int x) {
        int left = 0,right = x, res = 0;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if((long)mid * mid > x) {//0,1,2,3,4
                right = mid - 1;
            }else {
                res = mid; //res记录右移之前的mid，因为有可能右移之后就大于了
                left = mid + 1;
            }
        }
        return res;
    }
}
```

## [有效的完全平方数](https://leetcode-cn.com/problems/valid-perfect-square/)

> 给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。
>
> 进阶：不要 使用任何内置的库函数，如  sqrt 。
>
>  
>
> 示例 1：
>
> 输入：num = 16
> 输出：true
> 示例 2：
>
> 输入：num = 14
> 输出：false

```java
class Solution {
    public boolean isPerfectSquare(int num) {
        int left = 0, right = num;
        while(left <= right) {
            int mid = left + (right-left)/2;
            if((long)mid * mid > num) { //0,1,2,3,4,5,6,7,8,9
                right = mid - 1;
            }else if((long)mid * mid < num) {
                left = mid + 1;
            }else {
                return true;
            }
        }
        return false;
    }
}
```



今天就到此为止了，做了5道二分查找，总结大概就是在一个数组中查找某一个数的位置，或者平方根相关问题就能用二分查找，时间复杂度为O(log n)。

--------

——Soma 2021.6.3 23:00

