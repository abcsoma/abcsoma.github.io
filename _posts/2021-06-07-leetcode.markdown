---
layout:     post
title:      "6.7刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-06-07 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [长度最小的子数组](https://leetcode-cn.com/problems/minimum-size-subarray-sum/)

> 给定一个含有 n 个正整数的数组和一个正整数 target 。
>
> 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。
>
>  
>
> 示例 1：
>
> 输入：target = 7, nums = [2,3,1,2,4,3]
> 输出：2
> 解释：子数组 [4,3] 是该条件下的长度最小的子数组。
> 示例 2：
>
> 输入：target = 4, nums = [1,4,4]
> 输出：1
> 示例 3：
>
> 输入：target = 11, nums = [1,1,1,1,1,1,1,1]
> 输出：0

最近点的滑动窗口的题目。

```java
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        if(nums.length == 0) {
            return 0;
        }
        int left = 0, right = 0;
        int sum = 0;
        int len = Integer.MAX_VALUE;
        while(right < nums.length) {
            sum += nums[right];
            while(sum >= target) {
                len = Math.min(len, right - left + 1);
                sum -= nums[left++];
            }
            right++;//比较长度一定要在right++之前。
        }
        return len == Integer.MAX_VALUE ? 0 : len;
    }
}
```

这道题还可以用暴力法。

```java
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        if(nums.length == 0) {
            return 0;
        }
        int len = Integer.MAX_VALUE;
        for(int i = 0; i<nums.length; i++) {
            int sum = 0;
            for(int j = i; j<nums.length; j++) {
                sum += nums[j];//一般不用if～else判断，直接加上去然后if判断就行了
                if(sum >= target) {
                    len = Math.min(len, j - i + 1);
                    break;
                }
            }
        }
        return len == Integer.MAX_VALUE ? 0 : len;
    }
}
```

## [水果成篮](https://leetcode-cn.com/problems/fruit-into-baskets/)

> 在一排树中，第 i 棵树产生 tree[i] 型的水果。
> 你可以从你选择的任何树开始，然后重复执行以下步骤：
>
> 把这棵树上的水果放进你的篮子里。如果你做不到，就停下来。
> 移动到当前树右侧的下一棵树。如果右边没有树，就停下来。
> 请注意，在选择一颗树后，你没有任何选择：你必须执行步骤 1，然后执行步骤 2，然后返回步骤 1，然后执行步骤 2，依此类推，直至停止。
>
> 你有两个篮子，每个篮子可以携带任何数量的水果，但你希望每个篮子只携带一种类型的水果。
>
> 用这个程序你能收集的水果树的最大总量是多少？
>
>  
>
> 示例 1：
>
> 输入：[1,2,1]
> 输出：3
> 解释：我们可以收集 [1,2,1]。
> 示例 2：
>
> 输入：[0,1,2,2]
> 输出：3
> 解释：我们可以收集 [1,2,2]
> 如果我们从第一棵树开始，我们将只能收集到 [0, 1]。
> 示例 3：
>
> 输入：[1,2,3,2,2]
> 输出：4
> 解释：我们可以收集 [2,3,2,2]
> 如果我们从第一棵树开始，我们将只能收集到 [1, 2]。
> 示例 4：
>
> 输入：[3,3,3,1,2,1,1,2,3,3,4]
> 输出：5
> 解释：我们可以收集 [1,2,1,1,2]
> 如果我们从第一棵树或第八棵树开始，我们将只能收集到 4 棵水果树。

```java
class Solution {
    public int totalFruit(int[] fruits) {
        if(fruits == null || fruits.length == 0) {
            return 0;
        }
        int len = fruits.length;
        int max = 0;
        int left = 0;
        //map记录已有不重复元素集个数
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i<len; i++) {
            map.put(fruits[i], map.getOrDefault(fruits[i], 0) + 1);
            while(map.size() > 2) {
                //大于的话需要左边界++
                map.put(fruits[left], map.get(fruits[left]) - 1);
                if(map.get(fruits[left]) == 0) {
                    map.remove(fruits[left]);
                }
                left++;
            }
            max = Math.max(max, i - left + 1);
        }
        return max;
    }
}
```

## [最小覆盖子串](https://leetcode-cn.com/problems/minimum-window-substring/)

> 给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。
>
>  
>
> 注意：
>
> 对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。
> 如果 s 中存在这样的子串，我们保证它是唯一的答案。
>
>
> 示例 1：
>
> 输入：s = "ADOBECODEBANC", t = "ABC"
> 输出："BANC"
> 示例 2：
>
> 输入：s = "a", t = "a"
> 输出："a"
> 示例 3:
>
> 输入: s = "a", t = "aa"
> 输出: ""
> 解释: t 中两个字符 'a' 均应包含在 s 的子串中，
> 因此没有符合条件的子字符串，返回空字符串。

有点难，做了一会做不出来，看题解，思路没问题，差一点。

```java
class Solution {
    public String minWindow(String s, String t) {
        if(s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return "";
        }
        int left = 0, right = 0;
        int len = Integer.MAX_VALUE;
        int start = 0;
        int success = 0;//记录匹配完全次数
        //right右移，第一次找到包含所有t的所有字符时，right停止，left右移直到遇到第二个t中有的字符
        Map<Character, Integer> map = new HashMap<>();
        Map<Character, Integer> window = new HashMap<>();
        //记录t中字符出现的次数
        for(int i = 0; i<t.length(); i++) {
            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) + 1);
        }
        while(right < s.length()) {
            char c = s.charAt(right);
            if(map.containsKey(c)) {
                window.put(c, window.getOrDefault(c, 0) + 1);
                if(window.get(c).equals(map.get(c))) {
                    success++;
                }
            }
            right++;

            //判断已经完全匹配所有字符,然后left开始右移
            while(success == map.size()) {
                if(right - left < len) {
                    len = right - left;
                    start = left;
                }

                char d = s.charAt(left);
                if(map.containsKey(d)) {
                    if(window.get(d).equals(map.get(d))) {
                        //一旦右移，说明有一个字符不完全匹配了
                        success--;
                    }
                    window.put(d, window.get(d) - 1);
                }
                left++;
            }
        }
        return len == Integer.MAX_VALUE ? "" : s.substring(start, start+len);
    }
}
```

滑动窗口的题目的固定思路就是：

- 先移动右指针
- 满足条件，记录数值，移动左指针

--------

——Soma 2021.6.7 23:00

