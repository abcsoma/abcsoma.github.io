---
layout:     post
title:      "6.5刷题"
subtitle:   " \"LeetCode+NowCoder\""
date:       2021-06-05 12:00:00
author:     "Soma"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - LeetCode
    - 笔记
---

## [移除元素](https://leetcode-cn.com/problems/remove-element/)

> 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
>
> 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
>
> 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

```java
class Solution {
    public int removeElement(int[] nums, int val) {
        int size = nums.length;
        //1.暴力法
        for(int i = 0; i<size; i++) {
            if(nums[i] == val) {
                //如果遇到val，整体向前移动一格
                for(int j = i + 1; j<nums.length; j++) {
                    nums[j-1] = nums[j];
                }
                i--; //移动完i要往前移动一格
                size--; //数组的长度也变小了
            }
        }
        return size;
    }
}

class Solution {
    public int removeElement(int[] nums, int val) {
        //2.双指针法
        int slow = 0;
        for(int fast = 0; fast<nums.length; fast++) {
            if(nums[fast] != val) {
                //如果不等于val说明这个元素是需要的，slow就是需要元素的数组的下标
                nums[slow++] = nums[fast];//slow表示当前有效元素的后一个位置，所以返回的时候只要直接返回slow就行了。
            }
        }
        return slow;
    }
}

```

## [删除有序数组中的重复项](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)

> 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
>
> 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

```java
class Solution {
    public int removeDuplicates(int[] nums) {
        int left = 0, right = 1;
        if(nums.length == 0) {
            return 0;
        }
        while(right != nums.length) {
            if(nums[left] != nums[right]) {
                nums[++left] = nums[right];
            }
            right++;
        }
        return left + 1;//这个最终指向的是有效数组的最后一个位置的下标，所以长度要加1
    }
}
```

## [移动零](https://leetcode-cn.com/problems/move-zeroes/)

> 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
>
> 示例:
>
> 输入: [0,1,0,3,12]
> 输出: [1,3,12,0,0]

```java
class Solution {
    public void moveZeroes(int[] nums) {
        int left = 0, right = 0;
        while(right != nums.length) {
            if(nums[right] != 0) {
                nums[left++] = nums[right];
            }
            right++;
        }
        while(left != nums.length) {
            nums[left++] = 0;//最后补0，多一次循环
        }
    }
}

class Solution {
    public void moveZeroes(int[] nums) {
        int left = 0, right = 0;
        while(right != nums.length) {
            if(nums[right] != 0) {
                int tmp = nums[left];//直接交换位置，就能把0换到后面
                nums[left] = nums[right];
                nums[right] = tmp;
                left++;
            }
            right++;
        }
    }
}
```

## [比较含退格的字符串](https://leetcode-cn.com/problems/backspace-string-compare/)

> 给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。
>
> 注意：如果对空文本输入退格字符，文本继续为空。
>
>  
>
> 示例 1：
>
> 输入：S = "ab#c", T = "ad#c"
> 输出：true
> 解释：S 和 T 都会变成 “ac”。
> 示例 2：
>
> 输入：S = "ab##", T = "c#d#"
> 输出：true
> 解释：S 和 T 都会变成 “”。
> 示例 3：
>
> 输入：S = "a##c", T = "#a#c"
> 输出：true
> 解释：S 和 T 都会变成 “c”。
> 示例 4：
>
> 输入：S = "a#c", T = "b"
> 输出：false
> 解释：S 会变成 “c”，但 T 仍然是 “b”。

```java
class Solution {
    public boolean backspaceCompare(String s, String t) {
        return removeMark(s).equals(removeMark(t));
    }

    public String removeMark(String str) {
        StringBuilder sb = new StringBuilder();
        int right = 0;
        while(right != str.length()) {
            if(str.charAt(right) == '#') {
                if(sb.length() != 0) {
                    sb.deleteCharAt(sb.length()-1);
                }
            }else {
                sb.append(str.charAt(right));
            }
            right++;
        }
        return sb.toString();
    }
}
```

还有一种方法，一个字符删不删只取决于它后面的字符是否为'#'，那只要倒序遍历就能确定了，但要考虑的情况比较多。

```java
class Solution {
    public boolean backspaceCompare(String s, String t) {
        int i = s.length() - 1;
        int j = t.length() - 1;
        int skipS = 0, skipT = 0;
        while(i >= 0 || j >= 0) {
            while(i >= 0) {
                if(s.charAt(i) == '#') {
                    skipS++;
                    i--;
                }else if(skipS > 0) {
                    //skipS > 0代表还有字符没删除
                    skipS--;
                    i--;
                }else {
                    break;
                    //跳出确定一个字符
                }
            }
            while(j >= 0) {
                if(t.charAt(j) == '#') {
                    skipT++;
                    j--;
                }else if(skipT > 0) {
                    //skipT > 0代表还有字符没删除
                    skipT--;
                    j--;
                }else {
                    break;
                    //跳出确定一个字符
                } 
            }
            //此时两边都确定了一个字符
            if(i >= 0 && j >= 0) {
                if(s.charAt(i) != t.charAt(j)) {
                    return false;
                }
            }else {
                if(i >= 0 || j >= 0) {
                    return false;
                }
            }
            i--;
            j--;
        }
        return true;
    }
}
```

## [有序数组的平方](https://leetcode-cn.com/problems/squares-of-a-sorted-array/)

> 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。
>
>  
>
> 示例 1：
>
> 输入：nums = [-4,-1,0,3,10]
> 输出：[0,1,9,16,100]
> 解释：平方后，数组变为 [16,1,0,9,100]
> 排序后，数组变为 [0,1,9,16,100]
> 示例 2：
>
> 输入：nums = [-7,-3,2,3,11]
> 输出：[4,9,9,49,121]

将负数转化为正数，然后排序，再平方处理，复杂度有点高。

或者也可以平放完再排序。

```java
class Solution {
    public int[] sortedSquares(int[] nums) {
        for(int i = 0; i<nums.length; i++) {
            if(nums[i] < 0) {
                nums[i] = -nums[i];
            }
        }
        Arrays.sort(nums);
        for(int i = 0; i<nums.length; i++) {
            nums[i] *= nums[i];
        }
        return nums;
    }
}
```

或者双指针，因为外面的数平方肯定大于里面的数。

```java
class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] res = new int[nums.length];
        int left = 0, right = nums.length - 1;
        int i = res.length - 1;
        while(i >= 0) {
            if(nums[left] * nums[left] > nums[right] * nums[right]) {
                res[i] = nums[left] * nums[left];
                left++;
            }else {
                res[i] = nums[right] * nums[right];
                right--;
            }
            i--;
        }
        return res;
    }
}
```

今天就是主要做了一些，在数组里删除、移动等处理一些数据，大部分还是使用双指针比较容易，不过暴力法一样也能通过。

----------

——Soma 2021.6.5 23:00

